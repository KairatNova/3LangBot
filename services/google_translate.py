from datetime import datetime
import os
from aiogram import F, Router, types, html
from aiogram.filters import Command

from google.cloud import translate_v2 as translate
from langdetect import detect, DetectorFactory
from langdetect.lang_detect_exception import LangDetectException
from dotenv import find_dotenv, load_dotenv
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command, or_f
from aiogram.types import CallbackQuery
from database.translate_db import save_translation
from handlers.config import LANGUAGES
from keyboards import kbds
from keyboards.kbds import get_language_keyboard, get_main_keyboard


load_dotenv(find_dotenv())
translator_router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
translate_client = translate.Client(os.getenv('GOOGLE_APPLICATION_CREDENTIALS'))

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}  # True - –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –≤–∫–ª—é—á–µ–Ω, False - –≤—ã–∫–ª—é—á–µ–Ω
user_target_languages = {}  # –•—Ä–∞–Ω–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏

DetectorFactory.seed = 0  

@translator_router.callback_query(F.data == "translate")
async def activate_translator_callback(callback: CallbackQuery):
    user_states[callback.from_user.id] = True
    await callback.message.edit_reply_markup(reply_markup=None)  # –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:",
        reply_markup=get_language_keyboard(),
        input_field_placeholder='–ù–∞ –∫–∞–∫–æ–π —è–∑—ã–∫ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏?'
    )
    await callback.answer()

@translator_router.message(or_f(Command("translate"), F.text.lower() == "–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫"))
async def activate_translator_text(message: Message):
    user_states[message.from_user.id] = True
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:",
        reply_markup=get_language_keyboard(),
        placeholder='–ù–∞ –∫–∞–∫–æ–π —è–∑—ã–∫ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏?'
    )

#@translator_router.message(F.text == "üîÅ –í–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫")
#async def enable_translator(message: types.Message):
#    """–í–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
#    user_states[message.from_user.id] = True
#    await message.answer(
#        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:",
#        reply_markup=get_language_keyboard()
#    )
@translator_router.message(F.text == "üö´ –í—ã–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫")
async def disable_translator(message: types.Message):
    """–í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞"""
    user_states[message.from_user.id] = False
    await message.answer(
        "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ –≤—ã–∫–ª—é—á–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /translate –∏–ª–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.",
        reply_markup=get_main_keyboard()
    )

@translator_router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )


LANGUAGE_CODES = {v: k for k, v in LANGUAGES.items()}

@translator_router.message(F.text.in_(LANGUAGES.keys()))
async def set_target_language(message: types.Message):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–≤–æ–≥–æ —è–∑—ã–∫–∞"""
    lang_name = message.text
    lang_code = LANGUAGES[lang_name]
    user_target_languages[message.from_user.id] = lang_code
    await message.answer(
        f"–Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {lang_name}\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥'",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],

            ],
            resize_keyboard=True
        )
    )


async def detect_language_safe(text: str) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫—ã—Ä–≥—ã–∑—Å–∫–æ–≥–æ"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫—ã—Ä–≥—ã–∑—Å–∫–æ–≥–æ
        if is_kyrgyz_text(text):
            return 'ky'
            
        # –ü—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        detected = detect(text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç —è–∑—ã–∫ –≤ –Ω–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ
        if detected in LANGUAGE_CODES:
            return detected
            
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤
        if any(char in '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è' for char in text.lower()):
            return 'ru'
        elif any(char in 'abcdefghijklmnopqrstuvwxyz' for char in text.lower()):
            return 'en'
        elif any(char in '√§√∂√º√ü' for char in text.lower()):
            return 'de'
            
        return 'auto'
    except:
        return 'auto'

def is_kyrgyz_text(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫—ã—Ä–≥—ã–∑—Å–∫–∏–º"""
    kyrgyz_chars = {'“£', '“Ø', '”©', '“¢', '“Æ', '”®'}
    common_kyrgyz_words = { '–∫–∞–Ω–¥–∞–π', '–∫–∞–Ω—á–∞', '–∫–µ—Ä–µ–∫','–∫–∞–Ω–¥–∞–π—Å—ã–Ω', '–ö–∞–Ω–¥–∞–π—Å—ã–Ω'
    '–º–µ–Ω', '—Å–µ–Ω', '–∞–ª', '–±–∏–∑', '—Å–∏–ª–µ—Ä', '–∞–ª–∞—Ä',
    '–∫–∏–º', '—ç–º–Ω–µ', '–±—É–ª', '—Ç–∏–≥–∏–ª', '–∫–∞–π—Å—ã', '”©–∑',
    '–±–∞—Ä', '–∂–æ–∫', '–∫–µ–ª', '–∫–µ—Ç', '–∫”©—Ä', '–∞–π—Ç', '—É–≥', '–±–∏–ª', '–∂–∞—Å–∞',
    '—Ç—É—Ä', '–æ—Ç—É—Ä', '–±–µ—Ä', '–∞–ª', '–∂–µ—à', '–∏—á', '–æ–π–ª–æ', '–∂“Ø—Ä', '—Å“Ø–π',
    '–∂–∞–∫—à—ã', '–∂–∞–º–∞–Ω', '—á–æ“£', '–∫–∏—á–∏–Ω–µ', '–∫”©–ø', '–∞–∑', '—ç—Ä—Ç–µ', '–∫–µ—á',
    '–∂–∞“£—ã', '—ç—Å–∫–∏', '—Ç–µ–∑', '–∂–∞–π', '—ã—Å—ã–∫', '—Å—É—É–∫', '—Ç—É—É—Ä–∞', '—Ç—É—É—Ä–∞ —ç–º–µ—Å',
    '–∞–¥–∞–º', '–±–∞–ª–∞', '–∞—è–ª', '—ç—Ä–∫–µ–∫', '“Ø–π', '–º–µ–∫—Ç–µ–ø', '–∏—à', '—Å”©–∑',
    '—Ç–∏–ª', '–∞–∫—á–∞', '–∫“Ø–Ω', '—Ç“Ø–Ω', '—Å—É—É', '—Ç–∞–º–∞–∫', '–∂–µ—Ä', '–∞—Å–º–∞–Ω',
    '–¥–æ—Å', '–∞—Ç–∞', '–∞–ø–∞', '—à–∞–∞—Ä',
    '–∂–∞–Ω–∞', '–º–µ–Ω–µ–Ω', '–∂–µ', '“Ø—á“Ø–Ω', '—Å—ã—è–∫—Ç—É—É', '–¥–∞', '–¥–∞–≥—ã',
    '—ç–º–µ—Å', '—ç–ª–µ', '–±–∏—Ä–æ–∫', '–∞–Ω—Ç–∫–µ–Ω–∏', '–∫–∏–π–∏–Ω', '–º—É—Ä–¥–∞', '—É—á—É—Ä–¥–∞',
    '–±–µ—Ä–∏', '—á–µ–π–∏–Ω', '–±–æ–ª—Å–æ', '—É—à—É–Ω–¥–∞–π', 
    '–±“Ø–≥“Ø–Ω', '—ç—Ä—Ç–µ“£', '–∫–µ—á—ç—ç', '–∞–∑—ã—Ä', '–∞—Ä –¥–∞–π—ã–º', '–∫—ç—ç–¥–µ', '—ç—á –∫–∞—á–∞–Ω',
    '–±–∏—Ä', '—ç–∫–∏', '“Ø—á', '—Ç”©—Ä—Ç', '–±–µ—à', '–∞–ª—Ç—ã', '–∂–µ—Ç–∏', '—Å–µ–≥–∏–∑', '—Ç–æ–≥—É–∑', '–æ–Ω',
    '—Å–∞–ª–∞–º', '–∫–æ—à', '–±–æ–ª–æ—Ç'}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫—ã—Ä–≥—ã–∑—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
    if any(char in kyrgyz_chars for char in text):
        return True
        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫—ã—Ä–≥—ã–∑—Å–∫–∏–µ —Å–ª–æ–≤–∞
    words = text.lower().split()
    if any(word in common_kyrgyz_words for word in words[:5]):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–ª–æ–≤
        return True
        
    return False

@translator_router.message(F.text)
async def handle_text(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫—ã—Ä–≥—ã–∑—Å–∫–æ–≥–æ"""
    user_id = message.from_user.id
    
    if not user_states.get(user_id, False):
        return
    
    if user_id not in user_target_languages:
        await message.answer(
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ —á–µ—Ä–µ–∑ /translate",
            reply_markup=get_language_keyboard()
        )
        return
    
    try:
        text = message.text
        target_lang = user_target_languages[user_id]
        
        # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º source_lang –¥–ª—è –∫—ã—Ä–≥—ã–∑—Å–∫–æ–≥–æ
        if is_kyrgyz_text(text):
            source_lang = 'ky'
        else:
            source_lang = await detect_language_safe(text)
        
        # –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –∫—ã—Ä–≥—ã–∑—Å–∫–æ–≥–æ –≤—Å–µ–≥–¥–∞ —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º source
        if source_lang == 'ky':
            result = translate_client.translate(
                text,
                target_language=target_lang,
                source_language='ky'  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –∫—ã—Ä–≥—ã–∑—Å–∫–∏–π
            )
        else:
            result = translate_client.translate(
                text,
                target_language=target_lang,
                source_language=source_lang if source_lang != 'auto' else None
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –≤ –∏—Å—Ç–æ—Ä–∏—é
        await save_translation(
            user_id=user_id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            original_text=text,
            translated_text=result['translatedText'],
            source_lang=source_lang,
            target_lang=target_lang
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        source_lang_name = LANGUAGE_CODES.get(source_lang, source_lang)
        target_lang_name = LANGUAGE_CODES.get(target_lang, target_lang)
        
        response = (
            #f"<b>–û—Ä–∏–≥–∏–Ω–∞–ª</b> ({source_lang_name}):\n"
            #f"{html.quote(text)}\n\n"
            f"<b>–ü–µ—Ä–µ–≤–æ–¥</b> ({target_lang_name}):\n"
            f"{html.quote(result['translatedText'])}"
        )
        
        await message.answer(response, reply_markup=get_main_keyboard())
        
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}")