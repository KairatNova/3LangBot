import aiohttp
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bs4 import BeautifulSoup

define_router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class DefineStates(StatesGroup):
    choosing_language = State()
    entering_word = State()

# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@define_router.callback_query(F.data == "define")
async def cmd_difine_callback(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="English", callback_data="lang_en")],
        [InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
        [InlineKeyboardButton(text="–ö—ã—Ä–≥—ã–∑—á–∞", callback_data="lang_ky")],
    ])
    await callback.message.answer("üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —Å–ª–æ–≤–∞:", reply_markup=keyboard)
    await state.set_state(DefineStates.choosing_language)

@define_router.message(Command("define"))
async def cmd_define(message: Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="English", callback_data="lang_en")],
        [InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
        [InlineKeyboardButton(text="–ö—ã—Ä–≥—ã–∑—á–∞", callback_data="lang_ky")],
    ])
    await message.answer("üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —Å–ª–æ–≤–∞:", reply_markup=keyboard)
    await state.set_state(DefineStates.choosing_language)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@define_router.callback_query(F.data.startswith("lang_"))
async def process_language(callback: CallbackQuery, state: FSMContext):
    lang_code = callback.data.split("_")[1]
    await state.update_data(language=lang_code)
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:")
    await state.set_state(DefineStates.entering_word)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è
@define_router.message(DefineStates.entering_word)
async def process_word(message: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("language")
    word = message.text.strip()

    await message.answer("üîé –ò—â—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ...")

    definition = await get_definition(word, lang)

    if definition:
        await message.answer(f"üìñ –ó–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞ *{word}*:\n{definition}", parse_mode=ParseMode.MARKDOWN)
    else:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞ *{word}*.")

    await state.clear()

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è)
async def get_definition(word: str, language: str) -> str | None:
    if language in ["ru", "ky"]:
        lang_name = "–†—É—Å—Å–∫–∏–π" if language == "ru" else "–ö—ã—Ä–≥—ã–∑—Å–∫–∏–π"
        url = f"https://ru.wiktionary.org/wiki/{word}"
        headers = {'User-Agent': 'Mozilla/5.0'}
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers) as response:
                if response.status != 200:
                    return None
                html = await response.text()
                soup = BeautifulSoup(html, "html.parser")

                section = soup.find("span", id=lang_name)
                if not section:
                    return f"‚ö†Ô∏è –†–∞–∑–¥–µ–ª —è–∑—ã–∫–∞ '{lang_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω."

                definitions = []
                for tag in section.find_all_next():
                    if tag.name == 'ol':
                        for li in tag.find_all('li', recursive=False):
                            definitions.append(li.text.strip())
                        break
                    if tag.name == 'h2':
                        break

                if not definitions:
                    return "‚ÑπÔ∏è –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
                return "\n".join(f"{i+1}. {d}" for i, d in enumerate(definitions))
    
    # –î–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
    url = f"https://api.dictionaryapi.dev/api/v2/entries/{language}/{word}"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                try:
                    meanings = data[0]["meanings"]
                    parts = []
                    for m in meanings:
                        part = m["partOfSpeech"]
                        defs = [d["definition"] for d in m["definitions"][:2]]
                        parts.append(f"*{part}*: " + "; ".join(defs))
                    return "\n".join(parts)
                except Exception:
                    return None
    return None
