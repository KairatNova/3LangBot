import os
from aiogram import Router, F, types
from aiogram.filters import Command, or_f, StateFilter
import aiosqlite
import google.generativeai as genai

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from database.ai_database import AsyncAIDatabase
from handlers.config import Model, prompt

from dotenv import load_dotenv
from database.models import DB_NAME

load_dotenv()

ai_chat_router = Router()
db = AsyncAIDatabase()
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –∫–ª—é—á–∞ –¥–ª—è Google Generative AI (API key configuration for Google Generative AI)
gemini_api_key = os.getenv('GOOGLE_API_KEY')
genai.configure(api_key = gemini_api_key)

# –ú–æ–¥–µ–ª—å –∏ –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ AI (Model and prompt for generative AI)
model = Model
chat = prompt


class WaitingForMessage(StatesGroup):
    CaptureMessages = State()
    NonCaptureMessages = State()

async def check_tokens_limit(user_id: int, new_tokens: int) -> bool:
    current_date, used_tokens = await db.get_user_tokens(user_id)
    if used_tokens + new_tokens > 2000:
        return False
    return True

async def get_remaining_tokens(user_id: int) -> int:
    current_date, used_tokens = await db.get_user_tokens(user_id)
    return 2000 - used_tokens
''
async def get_user_language(user_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        async with aiosqlite.connect(DB_NAME) as db:
            cursor = await db.execute(
                "SELECT language FROM users WHERE telegram_id = ?", 
                (user_id,)
            )
            result = await cursor.fetchone()
            return result[0] if result else "ru"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —è–∑—ã–∫–∞: {e}")
        return "ru"''

async def command_chatgpt_intro(target, state: FSMContext):
    user_id = target.from_user.id if hasattr(target, 'from_user') else target.chat.id

    
    text = ("""
üá¨üáß <b>–ü—Ä–∏–≤–µ—Ç! –Ø –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –Ø–∑—ã–∫–æ–≤–æ–π –ü–æ–º–æ—â–Ω–∏–∫</b> üá∫üá∏
–ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?
üéì <b>–°–æ–≤–µ—Ç</b>: –ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø–æ 15-20 –º–∏–Ω—É—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞!
""")
    await target.answer(text.strip(), parse_mode="HTML")
    await state.set_state(WaitingForMessage.CaptureMessages)

async def callback_chatgpt_intro(target, state: FSMContext):
    user_id = target.from_user.id if hasattr(target, 'from_user') else target.chat.id

    
    text = ("""
üá¨üáß <b>–ê–Ω–≥–ª–∏–π—Å–∫–∏–π –Ø–∑—ã–∫–æ–≤–æ–π –ü–æ–º–æ—â–Ω–∏–∫ chatgpt</b> üá∫üá∏

‚ú® <b>–õ–∏–º–∏—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</b>  
- 2000 —Ç–æ–∫–µ–Ω–æ–≤ –≤ –¥–µ–Ω—å (~2000 —Å–∏–º–≤–æ–ª–æ–≤)  
- –õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞  
""")
    await target.answer(text.strip(), parse_mode="HTML")
    await state.set_state(WaitingForMessage.CaptureMessages)

@ai_chat_router.message(Command("chatgpt"))
async def handle_chatgpt_command(message: types.Message, state: FSMContext):
    await command_chatgpt_intro(message, state)

@ai_chat_router.callback_query(F.data == "chatgpt")
async def handle_chatgpt_button(callback: types.CallbackQuery, state: FSMContext):
    await callback_chatgpt_intro(callback.message, state)
    await callback.answer()

@ai_chat_router.message(WaitingForMessage.CaptureMessages)
async def bot_answer(message: types.Message, state: FSMContext):
    user_lang = await get_user_language(message.from_user.id)
    
    kb = [[types.KeyboardButton(text="stop‚õî")]]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

    if message.text == ("stop‚õî"):
        await state.set_state(WaitingForMessage.NonCaptureMessages)
        await message.answer(
            ("–ß–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞, –≤–≤–µ–¥–∏—Ç–µ /chatgpt"),
            reply_markup=types.ReplyKeyboardRemove()
        )
        return

    user_id = message.from_user.id
    remaining_tokens = await get_remaining_tokens(user_id)
    
    if remaining_tokens <= 0:
        await message.answer("‚ö†Ô∏è –í—ã –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–ª–∏ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ (2000). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
        return

    waitforanswer = await message.answer("Generating answer‚åõ")
    
    try:
        if message.text:
            question = message.text
            response = chat.send_message(question, safety_settings={
                'HATE': 'BLOCK_NONE',
                'HARASSMENT': 'BLOCK_NONE',
                'SEXUAL': 'BLOCK_NONE',
                'DANGEROUS': 'BLOCK_NONE'
            })
            response_text = response.text
        elif message.photo:
            photos_dir = "photos"
            os.makedirs(photos_dir, exist_ok=True)
            file_name = f"{photos_dir}/{message.photo[-1].file_id}.jpg"
            await message.bot.download(message.photo[-1], destination=file_name)
            sample_file = genai.upload_file(path=file_name, display_name="UserPhoto")
            response = model.generate_content(("–û–ø–∏—à–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" ), [sample_file])
            response_text = response.text
            os.remove(file_name)
        else:
            await message.answer("–≠—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            return

        # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ (1 —Ç–æ–∫–µ–Ω ‚âà 4 —Å–∏–º–≤–æ–ª–∞)
        tokens_used = len(response_text) // 4 + len(message.text or "") // 4
        
        if not await check_tokens_limit(user_id, tokens_used):
            await message.answer("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
            return

        await db.update_tokens(user_id, tokens_used)
        await db.log_query(user_id, message.text or "[photo]", response_text, tokens_used)
        
        await message.bot.delete_message(
            chat_id=message.chat.id,
            message_id=waitforanswer.message_id
        )
        
        response_message = (
            f"{response_text}\n\n"
            f"{('‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {used} (–û—Å—Ç–∞–ª–æ—Å—å: {remaining})').format(used=tokens_used, remaining=2000 - (await get_remaining_tokens(user_id)))}"
        )
        
        await message.answer(response_message, reply_markup=keyboard)

    except Exception as e:
        await message.answer(
            ("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}").format(error=str(e))
        )