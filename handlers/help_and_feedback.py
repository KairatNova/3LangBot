import aiosqlite
import pandas as pd, openpyxl
from datetime import datetime
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, FSInputFile

from aiogram.filters import Command, or_f




from database.feedback import check_feedback_limits, save_feedback

help_and_feedback_router = Router()


ADMIN_ID = 647302816  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
DB_NAME = "data/feedback.db"


class FeedbackForm(StatesGroup):
    waiting_for_feedback = State()



@help_and_feedback_router.message(or_f(Command("help"), (F.text.lower() == "help" )))
async def help_command(message: types.Message):
    await message.answer(''' 
üìå –û–ø–∏—Å–∞–Ω–∏–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ–º–∞–Ω–¥:\n
üü¢ /start ‚Äî –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≤—ã–±–æ—Ä —è–∑—ã–∫–∞  
üë§ /profile ‚Äî –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å  
üìã /menu ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏  
ü§ñ /chatgpt ‚Äî –¥–æ—Å—Ç—É–ø –∫ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫—É (ChatGPT)  
üìö /define ‚Äî —É–∑–Ω–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤  
üåê /translate ‚Äî –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ Google (—Ñ—Ä–∞–∑—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)  
üß† /learn_words ‚Äî –∏–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤ –ø–æ —Ç–µ–º–∞–º –Ω–∞ 3 —è–∑—ã–∫–∞—Ö (üá∑üá∫ RU / üá∫üá∏ EN / üá∞üá¨ KG) \n                
 üí° –ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:\n
1Ô∏è‚É£ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–ª–æ–≤–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –º–µ–∂–¥—É —Ä—É—Å—Å–∫–∏–º, –∞–Ω–≥–ª–∏–π—Å–∫–∏–º –∏ –∫—ã—Ä–≥—ã–∑—Å–∫–∏–º —è–∑—ã–∫–∞–º–∏.  
2Ô∏è‚É£ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ ChatGPT  
   (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ ‚Äî 2000 —Ç–æ–∫–µ–Ω–æ–≤ –≤ –¥–µ–Ω—å, 1 —Ç–æ–∫–µ–Ω ‚âà 2‚Äì3 —Å–∏–º–≤–æ–ª–∞).  
3Ô∏è‚É£ –ü—Ä–∏—Å—ã–ª–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–µ ( –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º).  
4Ô∏è‚É£ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–ø–∏—Å–∫–∏ —Å–ª–æ–≤ –Ω–∞ 3 —è–∑—ã–∫–∞—Ö –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.\n

‚úçÔ∏è–ß—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É ---> /feedback\n
                         
–î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞–≤—Ç–æ—Ä–∞ –∏ –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –±–æ—Ç–∞ 
VISA - 
''')
# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
@help_and_feedback_router.message(or_f(Command("feedback"), (F.text == "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤" )))
async def feedback_command(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    allowed, error_msg = await check_feedback_limits(message.from_user.id)
    if not allowed:
        await message.answer(error_msg)
        return
    
    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤.")
    await state.set_state(FeedbackForm.waiting_for_feedback)

@help_and_feedback_router.message(FeedbackForm.waiting_for_feedback)
async def handle_feedback(message: Message, state: FSMContext):
    # –ï—â–µ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–≥–æ –ø–∏—Å–∞–ª –æ—Ç–∑—ã–≤)
    allowed, error_msg = await check_feedback_limits(message.from_user.id)
    if not allowed:
        await message.answer(error_msg)
        await state.clear()
        return
    
    await state.clear()
    username = message.from_user.username or message.from_user.full_name
    await save_feedback(user_id=message.from_user.id, username=username, message=message.text)

    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")

    # –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞
    await message.bot.send_message(
        ADMIN_ID,
        f"üì¨ <b>–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤</b>\n"
        f"üë§ –û—Ç: @{username} (ID: <code>{message.from_user.id}</code>)\n"
        f"üí¨ <i>{message.text}</i>\n\n"
        f"–û—Ç–≤–µ—Ç—å—Ç–µ /reply_{message.from_user.id} —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å.",
        parse_mode="HTML"
    )






async def export_feedback_to_excel(filename: str = "feedback_export.xlsx"):
    async with aiosqlite.connect(DB_NAME) as db:
        async with db.execute("SELECT user_id, username, message, created_at FROM feedback") as cursor:
            rows = await cursor.fetchall()

    # –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è DataFrame
    data = [
        {
            "User ID": row[0],
            "Username": row[1],
            "Message": row[2],
            "Date": row[3]
        }
        for row in rows
    ]

    df = pd.DataFrame(data)
    df.to_excel(filename, index=False)
    return filename


@help_and_feedback_router.message(Command("export_feedback"))
async def export_feedback_handler(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    filename = await export_feedback_to_excel()
    await message.answer_document(
        document=FSInputFile(filename),
        caption="üìä –í—Å–µ –æ—Ç–∑—ã–≤—ã –≤ Excel"
    )
