import asyncio
from datetime import datetime
from aiogram import F, types, Router
from aiogram.filters import  Command, or_f
import aiosqlite
from keyboards.kbds import   inline_markup,  menu_kb_add
from database.models import DB_NAME
from datetime import datetime

from database.models import update_last_active


DB_NAME = "data/userdata.db"
user_private = Router()

@user_private.message(Command("start"))
async def cmd_start(message: types.Message):
    user = message.from_user
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    is_new_user = await check_and_create_user(
        telegram_id=user.id,
        first_name=user.first_name,
        username=user.username,
        language="ru"  # –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    )
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    await update_last_active(user.id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if is_new_user is None:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
        return
    
    if is_new_user:
        welcome_text = (
            f" –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n"
            "–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —è–∑—ã–∫–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫.\n"
            "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
            "‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 3 —è–∑—ã–∫–æ–≤\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –ò–ò\n"
            "‚Ä¢ –ù—É–∂–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è\n\n"
            "–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /menu –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µüëá"
        )
    else:
        welcome_text = (
            f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}!\n\n"
            "–†–∞–¥ –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º."
        )
    
    await message.answer(
        welcome_text,
        reply_markup=menu_kb_add.as_markup(
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
        )
    )

async def check_and_create_user(telegram_id: int, first_name: str, username: str, language: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π
    - False –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª
    - None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        async with aiosqlite.connect(DB_NAME) as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor = await db.execute(
                "SELECT 1 FROM users WHERE telegram_id = ?",
                (telegram_id,)
            )
            
            if await cursor.fetchone() is not None:
                return False  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            await db.execute(
                """INSERT INTO users 
                (telegram_id, first_name, username, language, registration_date, last_active) 
                VALUES (?, ?, ?, ?, ?, ?)""",
                (telegram_id, first_name, username or "", language, now, now)
            )
            await db.commit()
            return True  # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ check_and_create_user: {str(e)}")
        return None

async def update_last_active(telegram_id: int) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        async with aiosqlite.connect(DB_NAME) as db:
            now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            await db.execute(
                "UPDATE users SET last_active = ? WHERE telegram_id = ?",
                (now, telegram_id)
            )
            await db.commit()
            return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ last_active: {str(e)}")
        return False

@user_private.message(or_f(Command("menu"), (F.text.lower() == "–º–µ–Ω—é")))
async def menu_kbd_cmd(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é"""
    await message.answer(
        "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=inline_markup
    )