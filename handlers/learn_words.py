
import json
import os
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData




learn_words_router = Router()

with open("data/words.json", "r", encoding="utf-8") as f:
    words_data = json.load(f)

# –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
subcategories = {
    "pronouns": [
        "–õ–∏—á–Ω—ã–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è", "–ü—Ä–∏—Ç—è–∂–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è", "–£–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è",
        "–í–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è", "–í–æ–∑–≤—Ä–∞—Ç–Ω–æ–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ"
    ],
    "prepositions": [
        "–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–≥–∏", "–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–≥–∏", "–ü—Ä–µ–¥–ª–æ–≥–∏ –ø—Ä–∏—á–∏–Ω—ã –∏ —Ü–µ–ª–∏", "–ü—Ä–æ—á–∏–µ –ø—Ä–µ–¥–ª–æ–≥–∏"
    ],
    "adverbs": [
        "–ù–∞—Ä–µ—á–∏—è –≤—Ä–µ–º–µ–Ω–∏", "–ù–∞—Ä–µ—á–∏—è –º–µ—Å—Ç–∞", "–û–±—Ä–∞–∑–∞ –¥–µ–π—Å—Ç–≤–∏—è", "–ù–∞—Ä–µ—á–∏—è —Å—Ç–µ–ø–µ–Ω–∏", "–í–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ"
    ],
    "questions": [
        "–í–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞", "–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"
    ],
    "nouns": [
        "–õ—é–¥–∏", "–ü—Ä–∏—Ä–æ–¥–∞ –∏ —è–≤–ª–µ–Ω–∏—è", "–í–µ—â–∏ –∏ –ø—Ä–µ–¥–º–µ—Ç—ã", "–ñ–∏–≤–æ—Ç–Ω—ã–µ", "–ú–µ—Å—Ç–∞", "–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è"
    ],
    "verbs": [
        "–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", "–î–≤–∏–∂–µ–Ω–∏–µ", "–ß—É–≤—Å—Ç–≤–∞ –∏ —ç–º–æ—Ü–∏–∏", "–ú—ã—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã", "–†–µ—á—å –∏ –æ–±—â–µ–Ω–∏–µ", "–ü—Ä–æ—á–∏–µ –≤–∞–∂–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã"
    ],
    "adjectives": [
        "–ö–∞—á–µ—Å—Ç–≤–æ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–†–∞–∑–º–µ—Ä –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–¶–≤–µ—Ç–∞", "–§–æ—Ä–º–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞", "–í–∫—É—Å –∏ –æ—â—É—â–µ–Ω–∏—è", "–•–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"
    ]
}

# –ö–æ–º–∞–Ω–¥–∞ /learn_words
@learn_words_router.message(F.text == "/learn_words")
async def learn_words_command(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=get_main_menu())

# –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ "–£—á–∏—Ç—å —Å–ª–æ–≤–∞"
@learn_words_router.callback_query(F.data == "learn_words")
async def learn_words_button(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=get_main_menu())

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
def get_main_menu():
    kb = InlineKeyboardBuilder()
    kb.button(text="–ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è", callback_data="subcategories_pronouns")
    kb.button(text="–ü—Ä–µ–¥–ª–æ–≥–∏", callback_data="subcategories_prepositions")
    kb.button(text="–ù–∞—Ä–µ—á–∏—è", callback_data="subcategories_adverbs")
    kb.button(text="–í–æ–ø—Ä–æ—Å—ã", callback_data="subcategories_questions")
    kb.button(text="–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ", callback_data="subcategories_nouns")
    kb.button(text="–ì–ª–∞–≥–æ–ª—ã", callback_data="subcategories_verbs")
    kb.button(text="–ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ", callback_data="subcategories_adjectives")
    kb.adjust(2)
    return kb.as_markup()

# –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è —Å—Ä–∞–∑—É –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
@learn_words_router.callback_query(F.data.startswith("subcategories_"))
async def show_subcategories(callback: CallbackQuery):
    cat = callback.data.split("_")[1]
    subs = subcategories.get(cat, [])
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=sub, callback_data=f"words_{cat}_{i}")]
            for i, sub in enumerate(subs, start=1)
        ] + [[InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="learn_words")]]
    )
    await callback.message.edit_text(f"üî∏ –ü–æ–¥—Ä–∞–∑–¥–µ–ª—ã: *{cat.capitalize()}*", reply_markup=markup, parse_mode="Markdown")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–æ–≤
@learn_words_router.callback_query(F.data.startswith("words_"))
async def show_words(callback: CallbackQuery):
    _, cat, idx = callback.data.split("_")
    idx = int(idx)
    sub_name = subcategories.get(cat, [])[idx - 1]
    words = words_data.get(cat, {}).get(sub_name, [])

    if not words:
        text = "‚ö†Ô∏è –°–ª–æ–≤–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã."
    else:
        text = f"üìö *{sub_name}*\n\n"
        text += "\n".join([f"{r} ‚Äî‚Äî {e} ‚Äî‚Äî {k}" for r, e, k in words])

    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"subcategories_{cat}")]
        ]
    )
    await callback.message.edit_text(text, reply_markup=markup, parse_mode="Markdown")